---
// Components
// - Layout
import Layout from '../layouts/Layout.astro'
// - UI
import Hero from '../components/blocks/hero/PageHeader.astro'
import FAQComponent from '../components/blocks/FAQ/FaqSticky.astro'
import TextImage from '../components/blocks/basic/TextImage.astro'
import CTA from '../components/blocks/CTA/BasicDark.astro'

// Data - Fully from Sanity
import { getFAQPage, getFAQsByCategory } from '../lib/sanity'
import type { FAQPage, FAQSection, TextImageSection, FAQ } from '../lib/sanity/types'

// Fetch complete FAQ page data from Sanity
const faqPageData: FAQPage | null = await getFAQPage()

// Fallback data if Sanity data is not available
const defaultSEO = {
	title: 'FAQ | Foxi - Get Your Questions Answered',
	description: 'Find answers to common questions about Foxi pricing, integrations, features, and more.'
}

const defaultHeader = {
	title: 'Get Answers to Your <strong>Foxi</strong> Questions.',
	text: 'Find answers to common questions about Foxi and how it can help boost your productivity.'
}

// Extract data with fallbacks
const SEO = faqPageData?.seo || defaultSEO
const header = faqPageData?.header || defaultHeader
const faqSections = faqPageData?.faqSections || []
const textImageSections = faqPageData?.textImageSections || []
const ctaData = faqPageData?.cta

// Sort sections by order
const sortedFAQSections: FAQSection[] = faqSections.sort((a: FAQSection, b: FAQSection) => (a.order || 0) - (b.order || 0))
const sortedTextImageSections: TextImageSection[] = textImageSections.sort((a: TextImageSection, b: TextImageSection) => (a.order || 0) - (b.order || 0))

// Fetch FAQs for each category
const faqsData: Record<string, FAQ[]> = {}
for (const section of sortedFAQSections) {
  if (section.category) {
    faqsData[section.category] = await getFAQsByCategory(section.category)
  }
}

// Fallback images
import faqImage1 from '../assets/faq/faq-01.png'

// Create a combined sections array for proper ordering
const allSections = [
  ...sortedFAQSections.map(section => ({ ...section, type: 'faq' as const })),
  ...sortedTextImageSections.map(section => ({ ...section, type: 'textImage' as const }))
].sort((a, b) => (a.order || 0) - (b.order || 0))

---

<Layout title={SEO.title} description={SEO.description}>
	<Hero title={header.title} text={header.text} />
	
	{allSections.map((section) => {
		if (section.type === 'faq') {
			const faqSection = section as FAQSection & { type: 'faq' }
			const faqs: FAQ[] = faqsData[faqSection.category] || []
			return (
				<FAQComponent
					title={faqSection.title}
					text={faqSection.text}
					data={faqs}
					classes={faqSection.backgroundColor}
				/>
			)
		} else if (section.type === 'textImage') {
			const textImageSection = section as TextImageSection & { type: 'textImage' }
			const image = textImageSection.image || faqImage1
			const mobileImage = textImageSection.mobileImage || image
			return (
				<TextImage
					title={textImageSection.title}
					text={textImageSection.text}
					image={image}
					mobileImage={mobileImage}
					imagePosition={textImageSection.imagePosition}
					offsetImage={textImageSection.offsetImage}
					classes={textImageSection.backgroundColor}
				/>
			)
		}
	})}
	
	{ctaData ? (
		<CTA data={ctaData} />
	) : (
		<CTA />
	)}
</Layout>
