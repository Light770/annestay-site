---
// HeroSpaceAnomaly.astro
export interface Props {
  title?: string;
  subtitle?: string;
  badgeText?: string;
  primaryButtonText?: string;
  secondaryButtonText?: string;
}

const { 
  title = "Websites, Softwares and Machines", 
  subtitle = "Experience the next generation of Software. Exploring the new waves of innovation while being seamlessly integrated.",
  primaryButtonText = "Contact Me",
} = Astro.props;
---

<div class="hero-container">
  <!-- Space Anomaly Background Canvas -->
  <canvas id="space-anomaly-canvas"></canvas>
  
  <!-- Overlay for better text readability -->
  <div class="hero-overlay"></div>
  
  <!-- Hero Content -->
  <div class="hero-content">
    <!-- Title -->
    <h1 class="hero-title">
      <span class="hero-gradient-text">Elie Annestay</span>
      <br />
      {title}
    </h1>
    
    <!-- Subtitle -->
    <p class="hero-subtitle">
      {subtitle}
    </p>
    
    <!-- CTA -->
    <div class="hero-cta-container">
      <div class="hero-email-form" id="email-form">
        <input
          type="email"
          class="hero-email-input"
          id="email-input"
          placeholder="Enter your email"
        />
        <button class="hero-button hero-button-primary" id="submit-btn">
          {primaryButtonText}
        </button>
      </div>
    </div>
    
    <!-- Scroll Indicator -->
    <div class="hero-scroll-indicator">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="24" height="24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
      </svg>
    </div>
  </div>
</div>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
  
  * {
    box-sizing: border-box;
  }
  
  .hero-container {
    position: relative;
    width: 100%;
    height: 80vh;
    overflow: hidden;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: #000;
  }
  
  #space-anomaly-canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    touch-action: none;
  }
  
  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at center, transparent 0%, rgba(0, 0, 0, 0.2) 50%, rgba(0, 0, 0, 0.4) 100%);
    pointer-events: none;
  }
  
  .hero-content {
    position: relative;
    z-index: 10;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .hero-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.375rem 1rem;
    background: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.3);
    border-radius: 9999px;
    margin-bottom: 2rem;
    backdrop-filter: blur(10px);
    animation: fadeInUp 0.8s ease-out;
    will-change: transform;
  }
  
  .hero-badge-dot {
    width: 8px;
    height: 8px;
    background: #3b82f6;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }
  
  .hero-badge-text {
    color: #93bbfc;
    font-size: 0.875rem;
    font-weight: 500;
    letter-spacing: 0.025em;
  }
  
  .hero-title {
    font-size: clamp(2.5rem, 8vw, 5rem);
    font-weight: 800;
    color: #ffffff;
    text-align: center;
    line-height: 1.1;
    margin: 0 0 1.5rem 0;
    letter-spacing: -0.02em;
    animation: fadeInUp 0.8s ease-out 0.1s both;
    will-change: transform;
  }
  
  .hero-gradient-text {
    background: linear-gradient(135deg, #93bbfc 0%, #3b82f6 50%, #1d4ed8 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .hero-subtitle {
    font-size: clamp(1.125rem, 3vw, 1.5rem);
    font-weight: 400;
    color: rgba(255, 255, 255, 0.7);
    text-align: center;
    line-height: 1.6;
    margin: 0 0 3rem 0;
    max-width: 700px;
    animation: fadeInUp 0.8s ease-out 0.2s both;
    will-change: transform;
  }
  
  .hero-cta-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
    animation: fadeInUp 0.8s ease-out 0.3s both;
    will-change: transform;
  }
  
  @media (min-width: 640px) {
    .hero-cta-container {
      flex-direction: row;
    }
  }
  
  .hero-email-form {
    display: flex;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 0.25rem;
    backdrop-filter: blur(10px);
    transition: border-color 0.3s ease;
  }
  
  .hero-email-form.focused {
    border-color: rgba(59, 130, 246, 0.5);
  }
  
  .hero-email-input {
    background: transparent;
    border: none;
    color: #ffffff;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    outline: none;
    min-width: 280px;
    font-family: inherit;
  }
  
  .hero-email-input::placeholder {
    color: rgba(255, 255, 255, 0.4);
  }
  
  .hero-button {
    padding: 0.75rem 2rem;
    font-size: 1rem;
    font-weight: 600;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    position: relative;
    overflow: hidden;
    font-family: inherit;
  }
  
  .hero-button-primary {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: #ffffff;
  }
  
  .hero-button-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(59, 130, 246, 0.3);
  }
  
  .hero-button-secondary {
    background: rgba(255, 255, 255, 0.1);
    color: #ffffff;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .hero-button-secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
  }
  
  .hero-features {
    display: flex;
    gap: 3rem;
    margin-top: 4rem;
    animation: fadeInUp 0.8s ease-out 0.4s both;
    will-change: transform;
  }
  
  .hero-feature {
    text-align: center;
    color: rgba(255, 255, 255, 0.8);
  }
  
  .hero-feature-number {
    font-size: 2.5rem;
    font-weight: 700;
    color: #3b82f6;
    margin-bottom: 0.5rem;
  }
  
  .hero-feature-label {
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    opacity: 0.7;
  }
  
  .hero-scroll-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    animation: bounce 2s infinite;
  }
  
  .hero-scroll-indicator svg {
    color: rgba(255, 255, 255, 0.4);
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.2);
      opacity: 0.8;
    }
  }
  
  @keyframes bounce {
    0%, 100% {
      transform: translateX(-50%) translateY(0);
    }
    50% {
      transform: translateX(-50%) translateY(10px);
    }
  }
  
  @media (max-width: 640px) {
    .hero-email-form {
      flex-direction: column;
      width: 100%;
      max-width: 400px;
    }
    
    .hero-email-input {
      min-width: unset;
      width: 100%;
    }
    
    .hero-button {
      width: 100%;
    }
    
    .hero-features {
      gap: 2rem;
    }
    
    .hero-feature-number {
      font-size: 2rem;
    }
  }
</style>

<script>
  // Optimized shader source
  const shaderSource = `#version 300 es
precision mediump float;
out vec4 O;
uniform float time;
uniform vec2 resolution;
uniform vec2 move;
uniform int pointerCount;
#define T time
#define R resolution
#define P pointerCount

mat2 rot(float a) {
  float c = cos(a);
  float s = sin(a);
  return mat2(c, -s, s, c);
}

float swirls(vec3 p) {
  float d = 0.2;
  vec3 c = p;
  
  for (float i = 0.; i < 3.; i++) {
    p = .7 * abs(p) / dot(p, p) - .7;
    p.z -= .0618 * (1. + i);
    p.yz = vec2(p.y * p.y - p.z * p.z, 2. * p.y * p.z);
    p = p.zxy;
    d += exp(-9. * abs(dot(p, c))) * 2.1 / (3. - i);
  }
  return d;
}

vec3 march(vec3 p, vec3 rd) {
  vec3 col = vec3(0);
  float t = 0., c;
  
  for (float i = 0.; i < 40.; i++) {
    t += .05 * exp(-1.4 * c);
    c = swirls(p + rd * t);
    float hue = .3 + .3 * sin(6.3 * (i * c * .1 + .25));
    col += .03 * c * vec3(.6 * hue, .8 * hue, 1.2 * hue);
  }
  return col;
}

void main() {
  vec2 uv = (gl_FragCoord.xy - .5 * R) / min(R.x, R.y);
  vec3 p = vec3(0, 0, -4);
  vec3 rd = normalize(vec3(uv, 1));
  
  float moveScale = P > 0 ? .001 : .003;
  p.yz *= rot(-.84 + move.y * moveScale - sin(T * .1) * .25);
  p.xz *= rot(.42 - move.x * moveScale + T * .2);
  rd.yz *= rot(-.84 + move.y * moveScale - sin(T * .1) * .25);
  rd.xz *= rot(.42 - move.x * moveScale + T * .2);
  
  vec3 col = march(p, rd);
  
  float vignette = 1. - dot(uv, uv) * .25;
  col *= vignette;
  
  vec3 fogColor = vec3(.02, .05, .12);
  float depth = length(uv);
  col = mix(col, fogColor, smoothstep(0., 2., depth) * .3);
  
  col = col * vec3(.7, .8, 1.);
  col = min(col, vec3(.8, .8, .85));
  
  float t = min((T - .5) * .3, 1.);
  col *= t;
  
  O = vec4(col, 1);
}`;

  const vertexSource = `#version 300 es
in vec2 position;
void main(){gl_Position=vec4(position,0,1);}`;

  // Initialize WebGL
  class SpaceAnomalyRenderer {
    constructor(canvas) {
      this.canvas = canvas;
      this.gl = canvas.getContext('webgl2', {
        alpha: false,
        antialias: false,
        depth: false,
        stencil: false,
        preserveDrawingBuffer: false,
        powerPreference: 'low-power'
      });
      
      if (!this.gl) {
        console.error('WebGL2 not supported');
        return;
      }
      
      this.mouseMove = new Float32Array([0, 0]);
      this.pointerCount = 0;
      this.lastFrameTime = 0;
      this.frameInterval = 1000 / 30; // 30 FPS
      
      this.init();
    }
    
    createShader(type, source) {
      const shader = this.gl.createShader(type);
      this.gl.shaderSource(shader, source);
      this.gl.compileShader(shader);
      
      if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
        console.error('Shader compile error:', this.gl.getShaderInfoLog(shader));
        this.gl.deleteShader(shader);
        return null;
      }
      
      return shader;
    }
    
    init() {
      const gl = this.gl;
      
      // Create shaders
      const vertexShader = this.createShader(gl.VERTEX_SHADER, vertexSource);
      const fragmentShader = this.createShader(gl.FRAGMENT_SHADER, shaderSource);
      
      if (!vertexShader || !fragmentShader) return;
      
      // Create program
      this.program = gl.createProgram();
      gl.attachShader(this.program, vertexShader);
      gl.attachShader(this.program, fragmentShader);
      gl.linkProgram(this.program);
      
      if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
        console.error('Program link error:', gl.getProgramInfoLog(this.program));
        return;
      }
      
      // Create buffer
      const vertices = new Float32Array([-1, 1, -1, -1, 1, 1, 1, -1]);
      const buffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
      
      // Set up attributes
      const position = gl.getAttribLocation(this.program, 'position');
      gl.enableVertexAttribArray(position);
      gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0);
      
      // Cache uniform locations
      this.uniforms = {
        resolution: gl.getUniformLocation(this.program, 'resolution'),
        time: gl.getUniformLocation(this.program, 'time'),
        move: gl.getUniformLocation(this.program, 'move'),
        pointerCount: gl.getUniformLocation(this.program, 'pointerCount')
      };
      
      // Use program
      gl.useProgram(this.program);
      
      // Set up pointer events
      this.setupPointerEvents();
      
      // Start render loop
      this.render(0);
    }
    
    setupPointerEvents() {
      let active = false;
      
      const handleMove = (e) => {
        if (!active) return;
        this.mouseMove[0] += e.movementX;
        this.mouseMove[1] += e.movementY;
      };
      
      const throttledMove = this.throttle(handleMove, 16);
      
      this.canvas.addEventListener('pointerdown', () => {
        active = true;
        this.pointerCount = 1;
      }, { passive: true });
      
      this.canvas.addEventListener('pointerup', () => {
        active = false;
        this.pointerCount = 0;
      }, { passive: true });
      
      this.canvas.addEventListener('pointerleave', () => {
        active = false;
        this.pointerCount = 0;
      }, { passive: true });
      
      this.canvas.addEventListener('pointermove', throttledMove, { passive: true });
    }
    
    throttle(func, limit) {
      let inThrottle;
      return function(...args) {
        if (!inThrottle) {
          func.apply(this, args);
          inThrottle = true;
          setTimeout(() => inThrottle = false, limit);
        }
      };
    }
    
    resize() {
      const dpr = Math.max(1, 0.5 * window.devicePixelRatio);
      this.canvas.width = window.innerWidth * dpr;
      this.canvas.height = window.innerHeight * dpr;
      this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);
    }
    
    render = (currentTime) => {
      const deltaTime = currentTime - this.lastFrameTime;
      
      if (deltaTime >= this.frameInterval) {
        const gl = this.gl;
        
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.uniform2f(this.uniforms.resolution, this.canvas.width, this.canvas.height);
        gl.uniform1f(this.uniforms.time, currentTime * 0.001);
        gl.uniform2fv(this.uniforms.move, this.mouseMove);
        gl.uniform1i(this.uniforms.pointerCount, this.pointerCount);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        
        this.lastFrameTime = currentTime - (deltaTime % this.frameInterval);
      }
      
      requestAnimationFrame(this.render);
    };
  }

  // Initialize on DOM load
  document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('space-anomaly-canvas');
    if (!canvas) return;
    
    const renderer = new SpaceAnomalyRenderer(canvas);
    
    // Handle resize
    const handleResize = () => {
      clearTimeout(handleResize.timer);
      handleResize.timer = setTimeout(() => renderer.resize(), 100);
    };
    
    renderer.resize();
    window.addEventListener('resize', handleResize, { passive: true });
    
    // Handle email form interactions
    const emailForm = document.getElementById('email-form');
    const emailInput = document.getElementById('email-input');
    const submitBtn = document.getElementById('submit-btn');
    
    emailInput.addEventListener('focus', () => {
      emailForm.classList.add('focused');
    });
    
    emailInput.addEventListener('blur', () => {
      emailForm.classList.remove('focused');
    });
    
    emailInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        console.log('Email submitted:', emailInput.value);
      }
    });
    
    submitBtn.addEventListener('click', () => {
      console.log('Email submitted:', emailInput.value);
    });
  });
</script>