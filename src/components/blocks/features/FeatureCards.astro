---
// Feature Cards grid Section
// ------------
// Description: A grid of cards with feature information in a 4 column layout.

// Components
// - Layout
import Section from '../../ui/Section.astro'
import Row from '../../ui/Row.astro'
import Col from '../../ui/Col.astro'
// - UI
import BasicCard from '../../ui/cards/BasicCard.astro'
import PortableTextTitle from '../../ui/PortableTextTitle.astro'

// Types
import type { FeatureCard, FeatureCardHeader } from '../../../lib/sanity/types'
// Utils
import { urlFor } from '../../../lib/sanity'

// Props
type Props = {
	data?: FeatureCard[]
	header?: FeatureCardHeader
}

const { data = [], header } = Astro.props

// Use only Sanity data - no fallbacks
const featureCards = data
const sortedCards = featureCards.sort((a, b) => (a.order || 0) - (b.order || 0))

// Check if we have required data
const hasData = featureCards.length > 0 && header
const headerData = header

// Split cards into layout groups
const firstCard = sortedCards[0]
const middleCards = sortedCards.slice(1, 3)
const lastCards = sortedCards.slice(3, 5)
---

{hasData && (
<Section id="features">
	<Row>
		<Col span="12" align="center" classes="mb-12 max-w-4xl mx-auto">
			<h2 class="text-pretty">
				<PortableTextTitle content={headerData!.title} />
			</h2>
			<p class="pb-0 text-lg">
				{headerData!.text}
			</p>
		</Col>
	</Row>
	<Row>
		{firstCard && (
			<Col span="4">
				<BasicCard
					title={firstCard.title}
					subtitle={firstCard.description}
					image={firstCard.image ? urlFor(firstCard.image).width(300).height(200).url() : undefined}
					type="image-bottom"
					link="/features"
					classes="!bg-neutral-50 !shadow-none dark:!bg-neutral-900 h-full justify-between border border-neutral-100 dark:border-neutral-800"
				/>
			</Col>
		)}
		{middleCards.length > 0 && (
			<Col span="4" classes="flex flex-col gap-6">
				{middleCards.map((card) => (
					<BasicCard
						title={card.title}
						subtitle={card.description}
						image={card.image ? urlFor(card.image).width(300).height(200).url() : undefined}
						type="image-bottom"
						link="/features"
						classes="!bg-neutral-50 !shadow-none dark:!bg-neutral-900 h-full justify-between border border-neutral-100 dark:border-neutral-800"
					/>
				))}
			</Col>
		)}
		{lastCards.length > 0 && (
			<Col span="4" classes="flex flex-col gap-6">
				{lastCards.map((card) => (
					<BasicCard
						title={card.title}
						subtitle={card.description}
						image={card.image ? urlFor(card.image).width(300).height(200).url() : undefined}
						type="image-bottom"
						link="/features"
						classes="!bg-neutral-50 !shadow-none dark:!bg-neutral-900 h-full justify-between border border-neutral-100 dark:border-neutral-800"
					/>
				))}
			</Col>
		)}
	</Row>
</Section>
)}
